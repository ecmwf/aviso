.. _defining_my_listener:

Defining my listener
====================
Aviso configuration file allows the definition of multiple listeners. 
Alternatively, the listeners configuration can be indicated as an independent file or multiple files.
Regardless where is defined, each listener is composed of:

* an ``event`` type
* a ``request`` block
* a ``triggers`` block

Here a basic example:
   .. code-block:: yaml

      listeners:
         - event: mars
         request:
            class: od
            expver: 1
            domain: g
            stream: enfo
            step: [1,2,3]
         triggers:
            - type: echo

Event
-----

Aviso offers notifications for the following types of events:

* **dissemination** event is submitted by the product dissemination system ECPDS. The related listener configuration must define the ``destination`` field. A notification related to a dissemination event will have the field ``location`` containing the URL to the product notified
* **mars** event is designed for real-time data from the ECMWF model output. The related listener configuration does not have any mandatory fields. Moreover the related notification will not contain the location field because users will have to access to it by the conventional MARS_ API

.. _MARS: https://www.ecmwf.int/en/forecasts/datasets/archive-datasets

Request
-------
The table below shows the full list of fields accepted in a ``request`` block. These fields represent a subset on the MARS language.

+------------+----------------------+--------------+--------------------+
|Field       |Type                  | Event        | Optional/Mandatory |
+============+======================+==============+====================+
|destination |String, uppercase     |dissemination |Mandatory           |
+------------+----------------------+--------------+--------------------+
|target      |String                |dissemination |Optional            |
+------------+----------------------+--------------+--------------------+
|date        |Date (e.g.20190810)   |All           |Optional            |
+------------+----------------------+--------------+--------------------+
|time        |Values: [0,6,12,18]   |All           |Optional            |
+------------+----------------------+--------------+--------------------+
|class       |Enum                  |All           |Optional            |
+------------+----------------------+--------------+--------------------+
|stream      |Enum                  |All           |Optional            |
+------------+----------------------+--------------+--------------------+
|domain      |Enum                  |All           |Optional            |
+------------+----------------------+--------------+--------------------+
|expver      |Integer               |All           |Optional            |
+------------+----------------------+--------------+--------------------+
|step        |Integer               |All           |Optional            |
+------------+----------------------+--------------+--------------------+

Triggers
--------

The ``triggers`` block accepts a sequence of triggers. Each trigger will result in an independent process executed every time a notification is received. 
These are the triggers currently available:

* **echo** is the simplest trigger as it prints the notification to the console output. It is used for testing
* **log** is useful for recording the received event to a log file
* **command** allows the user to define a shell command to work with the notification
* **post** allows the user to send the notification received as HTTP POST message formatted accordingly to the CloudEvent_ specification

More information are available in the :ref:`triggers`.

.. _CloudEvent: https://cloudevents.io/