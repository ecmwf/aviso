.. _defining_my_listener:

First Steps
===========

Defining my listener
--------------------
Aviso configuration file allows the definition of multiple listeners. Alternatively, the listeners configuration can be indicated as an independent file or multiple files:

.. code-block:: bash

   % aviso listen listener1.yaml listener2.yaml


Regardless where is defined, each listener is composed of:

* an ``event`` type
* a ``request`` block
* a ``triggers`` block

Event
^^^^^

Aviso offers notifications for the following types of events:

* **dissemination** event is submitted by the product dissemination system ECPDS. The related listener configuration must define the ``destination`` field. A notification related to a dissemination event will have the field ``location`` containing the URL to the product notified
* **mars** event is designed for real-time data from the ECMWF model output. The related listener configuration does not have any mandatory fields. Moreover the related notification will not contain the location field because users will have to access to it by the conventional MARS API

Request
^^^^^
The table below shows the full list of fields accepted in a ``request`` block. These fields represent a subset on the MARS language.

+------------+----------------------+--------------+--------------------+
|Field       |Type                  | Event        | Optional/Mandatory |
+============+======================+==============+====================+
|destination |String, uppercase     |dissemination |Mandatory           |
+------------+----------------------+--------------+--------------------+
|target      |String                |dissemination |Optional            |
+------------+----------------------+--------------+--------------------+
|date        |Date (e.g.20190810)   |All           |Optional            |
+------------+----------------------+--------------+--------------------+
|time        |Values: [0,6,12,18]   |All           |Optional            |
+------------+----------------------+--------------+--------------------+
|class       |Enum                  |All           |Optional            |
+------------+----------------------+--------------+--------------------+
|stream      |Enum                  |All           |Optional            |
+------------+----------------------+--------------+--------------------+
|domain      |Enum                  |All           |Optional            |
+------------+----------------------+--------------+--------------------+
|expver      |Integer               |All           |Optional            |
+------------+----------------------+--------------+--------------------+
|step        |Integer               |All           |Optional            |
+------------+----------------------+--------------+--------------------+

Triggers
^^^^^

The ``triggers`` block accepts a sequence of triggers. Each trigger will result in an independent process executed every time a notification is received. 
These are the triggers currently available:

* **echo** is the simplest trigger as it prints the notification to the console output. It is used for testing
* **log** is useful for recording the received event to a log file
* **command** allows the user to define a shell command to work with the notification
* **post** allows the user to send the notification received as HTTP POST message formatted accordingly to the CloudEvent_ specification

More information are available in the :ref:`reference`.

.. _CloudEvent: https://cloudevents.io/


Aviso as a Python API
--------------------
Aviso can be used as a Python API. This is intended for users that want to integrate Aviso in a bigger workflow written in Python or that simply have their trigger 
defined as a Python function. Below an example of a python script that defines a function to be executed once a notification is received, 
creates a listener that references to this function trigger and finally passes it to aviso to execute.

.. code-block:: python

   from pyaviso import NotificationManager

   # define function to be called
   def do_something(notification):
      print(f"Notification for step {notification['request']['step']} received")
      # now do something useful with it ...

   # define the trigger
   trigger = {"type": "function", "function": do_something}

   # create a event listener request that uses that trigger
   request = {"class": "od", "stream": "oper", "expver": 1, "domain": "g", "step": 1}
   listeners = {"listeners": [{"event": "mars", "request": request, "triggers": [trigger]}]}

   # run it
   aviso = NotificationManager()
   aviso.listen(listeners=listeners)

.. note::
   The example is assuming the configuration file ~/aviso/config.yaml for the authentication purposes.




.. note::
   Before starting to listen to new notifications, the application checks what was the last notification 
   received and it will then return immediately all the notifications that have been missed since. It will then start 
   listening for new ones. The first ever time the application runs however no previous notification will be returned. 